local function secureread( _sReplaceChar )
  term.setCursorBlink( true )

  local sLine = ""
  local nHistoryPos = nil
  local nPos = 0
  if _sReplaceChar then
    _sReplaceChar = string.sub( _sReplaceChar, 1, 1 )
  end
  
  local w, h = term.getSize()
  local sx, sy = term.getCursorPos()  
  
  local function redraw( _sCustomReplaceChar )
    local nScroll = 0
    if sx + nPos >= w then
      nScroll = (sx + nPos) - w
    end
      
    term.setCursorPos( sx, sy )
    local sReplace = _sCustomReplaceChar or _sReplaceChar
    if sReplace then
      term.write( string.rep( sReplace, string.len(sLine) - nScroll ) )
    else
      term.write( string.sub( sLine, nScroll + 1 ) )
    end
    term.setCursorPos( sx + nPos - nScroll, sy )
  end
  
  while true do
    local sEvent, param = os.pullEventRaw()
    if sEvent == "char" then
      sLine = string.sub( sLine, 1, nPos ) .. param .. string.sub( sLine, nPos + 1 )
      nPos = nPos + 1
      redraw()
      
    elseif sEvent == "key" then
        if param == keys.enter then
        -- Enter
        break
        
      elseif param == keys.left then
        -- Left
        if nPos > 0 then
          nPos = nPos - 1
          redraw()
        end
        
      elseif param == keys.right then
        -- Right        
        if nPos < string.len(sLine) then
          redraw(" ")
          nPos = nPos + 1
          redraw()
        end
      
      elseif param == keys.backspace then
        -- Backspace
        if nPos > 0 then
          redraw(" ")
          sLine = string.sub( sLine, 1, nPos - 1 ) .. string.sub( sLine, nPos + 1 )
          nPos = nPos - 1         
          redraw()
        end

      elseif param == keys.home then
        -- Home
        redraw(" ")
        nPos = 0
        redraw()

      elseif param == keys.delete then
        if nPos < string.len(sLine) then
          redraw(" ")
          sLine = string.sub( sLine, 1, nPos ) .. string.sub( sLine, nPos + 2 )       
          redraw()
        end

      elseif param == keys["end"] then
        -- End
        redraw(" ")
        nPos = string.len(sLine)
        redraw()
      end
    end
  end
  
  term.setCursorBlink( false )
  term.setCursorPos( w + 1, sy )
  print()
  
  return sLine
end

local function prompt(promptText, promptColour, textColour)
  local input
  while not input do
    term.setTextColour( promptColour )
    write(promptText)
    term.setTextColour( textColour )
    input = secureread()
  end
  return input
end

local function loginPrompt(promptColour, textColour)
  local user     = prompt("   Login: ", promptColour, textColour)
  local password = prompt("Password: ", promptColour, textColour)

  return user, password
end

local function newUserPrompt(promptColour, textColour)
  local user      = prompt("         Login: ", promptColour, textColour)
  local password1, password2 = "1", "2"

  while true do
    password1 = prompt("      Password: ", promptColour, textColour)
    password2 = prompt("Password again: ", promptColour, textColour)
    if password1 ~= password2 then
      print("Password doesn't match. Try again.")
    else
      break
    end
  end

  return user, password1
end

-- Colours
local promptColour, textColour, bgColour
if term.isColour() then
  promptColour = colours.yellow
  textColour = colours.white
  bgColour = colours.black
else
  promptColour = colours.white
  textColour = colours.white
  bgColour = colours.black
end

if not fs.exists(os.path() .. "/.passwords") then
  term.setBackgroundColor( bgColour )
  term.setTextColour( promptColour )
  term.clear()
  term.setCursorPos( 2, 2 )
  print( "Set up administrator account." )
  term.setCursorPos( 1, 4 )
  
  local user, password = newUserPrompt(promptColour, textColour)
  account.createUser(user, password, "administrator")

  write("Administrator account created.")
  os.sleep(3)
  term.clear()
end

while true do
  term.setBackgroundColor( bgColour )
  term.setTextColour( promptColour )
  term.clear()
  term.setCursorPos( 2, 2 )
  print( os.version() )
  term.setCursorPos( 1, 4 )

  while true do
    local user, password = loginPrompt(promptColour, textColour)
    if account.authenticateUser(user, password) then
      break
    else
      print("Invalid login.")
    end
  end

  os.run( {}, "rom/programs/shell" )
end