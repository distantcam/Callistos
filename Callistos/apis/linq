Enumerable = { }
Enumerable.__index = Enumerable

-- ============================================================
-- CONSTRUCTOR
-- ============================================================

local function newEnumerable(iterator)
  local instance = setmetatable({ }, Enumerable)
  instance.internalmarker = "EnumerableType"
  instance.iterator = iterator
  return instance
end

-- ============================================================
-- GENERATORS
-- ============================================================

function fromArray(collection)
  return newEnumerable(function()
    local i = 0
    local n = #collection

    return function()
      if i < n then
        i = i + 1
        return collection[i]
      end
    end
  end)
end

function fromDictionary(dictionary)
  return newEnumerable(function()
    local k = nil

    return function()
      k, v = next(dictionary, k)
      if k then return { key = k, value = v } end
    end
  end)
end

function fromNil()
  return fromArray({ })
end

function fromIterator(iterator)
  return newEnumerable(iterator)
end

function from(auto)
  if auto == nil then
    return fromNil()
  elseif type(auto) == "function" then
    return fromIterator(auto)
  elseif type(auto) == "table" then
    if auto.internalmarker == "EnumerableType" then
      return auto
    elseif auto[1] == nil then
      return fromDictionary(auto)
    else
      return fromArray(auto)
    end
  end
  error("could not create enumerable from type "..type(auto))
end

-- ============================================================
-- QUERY METHODS
-- ============================================================

function Enumerable:concat(otherItems)
  local otherEnum = from(otherItems)

  return newEnumerable(function()
    local iter = self.iterator()
    local otherIter = otherEnum:toIterator()
    return function()
      local v = iter()
      if v then return v end
      v = otherIter()
      if v then return v end
    end
  end)
end

function Enumerable:where(predicate)
  if type(predicate) ~= "function" then
    error("predicate argument must be a function.")
  end

  return newEnumerable(function()
    local iter = self.iterator()
    local i = 0
    return function()
      local v = iter()
      i = i + 1
      while v and not predicate(v, i) do
        v = iter()
        i = i + 1
      end
      if v then return v end
    end
  end)
end

function Enumerable:select(projection)
  if type(projection) ~= "function" then
    error("projection argument must be a function.")
  end

  return newEnumerable(function()
    local iter = self.iterator()
    local i = 0
    return function()
      local v = iter()
      i = i + 1
      if v then return projection(v, i) end
    end
  end)
end

function Enumerable:selectMany(projection)
  if type(projection) ~= "function" then
    error("projection argument must be a function.")
  end

  return newEnumerable(function()
    local iter = self.iterator()
    local v = iter()
    local i = 1
    if not v then return function() return nil end end
    local iter2 = from(projection(v, i)):toIterator()

    return function()
      local v2 = iter2()
      if not v2 then
        v = iter()
        i = i + 1
        if v then
          iter2 = from(projection(v, i)):toIterator()
          v2 = iter2()
        end
      end
      if v2 then return v2 end
    end
  end)
end

function Enumerable:skip(count)
  return newEnumerable(function()
    local iter = self.iterator()
    local i = 0
    return function()
      local v = iter()
      i = i + 1
      while i <= count do
        v = iter()
        i = i + 1
      end
      if v then return v end
    end
  end)
end

function Enumerable:take(count)
  return newEnumerable(function()
    local iter = self.iterator()
    local i = 0
    return function()
      local v = iter()
      i = i + 1
      if v and i <= count then return v end
    end
  end)
end

-- ============================================================
-- EVALUATION METHODS
-- ============================================================

function Enumerable:toIterator()
  return self.iterator()
end

function Enumerable:toArray()
  local result = { }

  for value in self.iterator() do
    table.insert(result, value)
  end

  return result
end

function Enumerable:dump(func)
  if not func then
    func = print
  end

  for value in self.iterator() do
    func(tostring(value))
  end
end
